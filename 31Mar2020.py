{"metadata":{"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import random\n\n\n\nrandom.random()\n\n\ns=random.randint(1,100)\nprint(s)\n\n\ndef get_n_random_numbers(n=10,min_=-5,max_=5):#-5 ve 5 aralığında 10 sayı üretildiç\n    numbers=[]\n    for i in range(n): # complexity -> n\n        numbers.append(random.randint(min_,max_))\n    return numbers\nget_n_random_numbers()\n\n\n\nmy_list=get_n_random_numbers(15,-4,4)\nprint(my_list)\n\n\n\n#histogram with two methods\n\n\n\n# for a list [0, -4, 8, -1, 0, -3, 6, 3, 0, 1]\n# get the histogram , with array of tuples format\nhistgram_1=[\n(-4,1),\n(-3,1),\n(-1,1),\n(0,2),\n(1,1),\n(3,1),\n(6,1),\n(8,1),\n]\n\n\nprint(sorted(my_list))#dizi sıralandı\n\n\n\ndef my_frequency_with_dict(list): #complexity ->len(list)\n    frequency_dict={} # dict()={}\n    for item in list:\n        if (item in frequency_dict):#eğer eleman histogramda varsa sayısını 1 arttır\n            frequency_dict[item]=frequency_dict[item]+1\n        else:\n            frequency_dict[item]=1#yoksa değerini 1 yap\n    return frequency_dict\n\n\n\nprint(my_frequency_with_dict(my_list))\n\n\ndef my_frequency_with_list_of_tuples(list_1):  #complexity -> BİG O(N2) \n    frequency_list=[]\n    for i in range(len(list_1)):\n        s=False\n        for j in range(len(frequency_list)):\n            if (list_1[i]==frequency_list[j][0]):\n                frequency_list[j][1]=frequency_list[j][1]+1\n                s=True\n        if(s==False):\n            frequency_list.append([list_1[i],1])\n    return frequency_list\n\n\n\nmy_list=[2,3,2,5,8,2,4,3,3,2,8,5,2,4,4,4,4,4]\nresult_1=my_frequency_with_dict(my_list)\nresult_2=my_frequency_with_list_of_tuples(my_list)\nprint(result_1,result_2)\n\n\n#mode of a list with histogram\n\n\nmy_list_1=get_n_random_numbers(5,-2,2) #dizi üreteldi\nmy_hist_d=my_frequency_with_dict(my_list_1) #dizinin histogramını oluşturuldu.\nprint(my_hist_d)\n\n\n\nmy_hist_l=my_frequency_with_list_of_tuples(my_list_1)\nprint(my_hist_l)\n\n\n# to get mode , we have to search all keys on hist_dict\nfrequency_max=-1 # mode değeri, döngüde karşılaştırılacak hafıza amaçlı değer\nmode=-1\nfor key in my_hist_d.keys():\n    print(key,my_hist_d[key])\n    if my_hist_d[key]>frequency_max:\n        frequency_max=my_hist_d[key]\n        mode=key\nprint(mode,frequency_max)\n\n\n\n# to get mode , we have to search all keys on hist_dict\ndef my_mode_with_dict(my_hist_d): #complexity -> BİG O(N) \n    frequency_max=-1 # mode değeri, döngüde karşılaştırılacak hafıza amaçlı değer\n    mode=-1\n    for key in my_hist_d.keys():\n        # print(key,my_hist_d[key])\n        if my_hist_d[key]>frequency_max:\n            frequency_max=my_hist_d[key]\n            mode=key\n    return mode,frequency_max\n\n\n\nmy_list_100=get_n_random_numbers(100,-40,40)\nmy_hist_1=my_frequency_with_dict(my_list_100)\nprint(my_mode_with_dict(my_hist_1))\n\n\n\nprint(sorted(my_list_100))\n\n\n\n#mode of a list with histogram ( a list of tuples)\n\n\nmy_list_1=get_n_random_numbers(10)\nmy_hist_list=my_frequency_with_list_of_tuples(my_list_1)\nprint(my_hist_list)\n\n\n# to get mode , we have to search all keys on hist_dict\nfrequency_max=-1 # mode değeri, döngüde karşılaştırılacak hafıza amaçlı değer\nmode=-1\nfor item,frequency in my_hist_list:\n    print(item,frequency)\n    if frequency>frequency_max:\n        frequency_max=frequency\n        mode=item\nprint(mode,frequency_max)\n\n\n#with method\n# to get mode , we have to search all keys on hist_dict\ndef my_mode_with_list(my_hist_list): #complexity -> BİG O(len(my_hist_list))\n    frequency_max=-1 # mode değeri, döngüde karşılaştırılacak hafıza amaçlı değer\n    mode=-1\n    for item,frequency in my_hist_list:\n        print(item,frequency)\n        if frequency>frequency_max:\n            frequency_max=frequency\n            mode=item\n    return mode,frequency_max\n\n\nmy_list_100=get_n_random_numbers(20,-4,4)\nmy_hist_1=my_frequency_with_list_of_tuples(my_list_100) #histogramı olusturuldu\nprint(my_mode_with_list(my_hist_1))#modu bulundu\n\n\n#linear search on list ->doğrusal arama\n\n\n\ndef my_linear_search(my_list,item_search): #complexity -> BİG O(N)  , iyi durumda -> O(1)\n    s=0\n    found=(-1,-1) # default, eğer listede yoksa\n    n=len(my_list)\n    for indis in range(n):\n        s+=1\n        if my_list[indis]==item_search:\n            found=(my_list[indis],indis) # listede bulundu, return bulunn sayı, indisi\n            break #uncomment for last found\n    return found,s\n\n\n\nmy_list=get_n_random_numbers(10,-5,5)\nprint(my_list)\n\n\nprint(my_linear_search(my_list,-3)) #break koyarsak 1 adımda bulur fakat koymassak bulsa dahı lıstenın sonuna kadar arama yapılır yanı 10 olur\n\n\n#mean of list\n\n\n\nmy_list=get_n_random_numbers(10,-50,50)\nprint(my_list)\n\n\n\n\n\ndef my_mean(my_list):\n    s,t=0,0\n    for item in my_list:\n        s=s+1\n        t=t+item\n        mean_=t/s\n    return mean_\n\n\n\nprint(my_mean(my_list))\n\n\n\nmy_list=get_n_random_numbers(4,-5,5)\nprint(my_list)\nprint(my_mean(my_list))\n\n\n#sort the list\n\n\nprint(my_list)\n\n\nn=len(my_list)\nprint(my_list)\nfor i in range(n-1,-1,-1):\n    for j in range(0,i):\n        if not(my_list[j]<my_list[j+1]):\n            temp=my_list[j]\n            my_list[j]=my_list[j+1]\n            my_list[j+1]=temp\nprint(my_list)\n\n\n\n\n\n# with function\ndef my_bubble_sort(my_list): #complexity -> BİG O(N2) \n    n=len(my_list)\n    #print(my_list)\n    for i in range(n-1,-1,-1):\n        for j in range(0,i):\n            if not(my_list[j]<my_list[j+1]):\n                temp=my_list[j]\n                my_list[j]=my_list[j+1]\n                my_list[j+1]=temp\n    return my_list\n\n\n\nmy_list=get_n_random_numbers(4,-5,5)\nprint(my_list)\nprint(my_bubble_sort(my_list))\n\n\n\n#binary search on a sorted list\n\n\ndef my_binary_search(my_list, item_search): #complexity -> BİG O(LOG n ) \n    found=(-1,-1)\n    low = 0\n    high = len(my_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if my_list[mid] == item_search:\n            return my_list[mid],mid\n        elif my_list[mid] > item_search:#yeni alt liste\n            high = mid - 1\n        else:\n            low = mid + 1#yeni alt liste\n    return found # None\n\n\n\nmy_list_1=get_n_random_numbers(10)\nprint(\"liste \",my_list_1)\nmy_list_2=my_bubble_sort(my_list_1)\nprint(\"sırali liste\",my_list_2)\nprint(my_binary_search(my_list_2,3))\n\n\n#median of a list\n\nsize=input(\"dimension\")\nsize=int(size) # convert str to int\nmy_list_1=get_n_random_numbers(size)\nprint(\"list \",my_list_1)\n\n\nmy_list_2=my_bubble_sort(my_list_1)\n\nprint(my_list_2)\n\n\ndef my_median(my_list):\n    my_list_2=my_bubble_sort(my_list)\n    print(my_list_2)\n    n=len(my_list_2)\n    print(n)\n    if n%2==1:\n        middle=int(n/2)\n        median=my_list_2[middle]\n        print(median)\n    else:\n        middle_1=my_list_2[int(n/2)-1]\n        middle_2=my_list_2[int(n/2)]\n        median=(middle_1+middle_2)/2\n        print (median)\n    return median\n\n\nmy_list_2=get_n_random_numbers(5,-10,10)\nprint(my_median(my_list_2))","metadata":{"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"List: [-4, -4, -3, -3, -3, -3, -2, 1, 3, 3]\nDict of List: {-4: 2, -3: 4, -2: 1, 1: 1, 3: 2}\nmode: -3 median:-3.0\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}